name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fileservice_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libjsoncpp-dev \
          uuid-dev \
          zlib1g-dev \
          openssl \
          libssl-dev \
          postgresql-server-dev-all \
          libpq-dev \
          lcov

    - name: Install Drogon
      run: |
        git clone https://github.com/drogonframework/drogon
        cd drogon
        git submodule update --init
        mkdir build && cd build
        cmake ..
        make -j$(nproc)
        sudo make install

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTING=ON ..

    - name: Build
      run: |
        cd build
        make -j$(nproc)

    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./build/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          your-dockerhub-username/fileservice:latest
          your-dockerhub-username/fileservice:${{ github.sha }}
        cache-from: type=registry,ref=your-dockerhub-username/fileservice:buildcache
        cache-to: type=registry,ref=your-dockerhub-username/fileservice:buildcache,mode=max

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          docker pull your-dockerhub-username/fileservice:${{ github.sha }}
          docker stop fileservice || true
          docker rm fileservice || true
          docker run -d \
            --name fileservice \
            --restart always \
            -p 3000:3000 \
            -v /data/fileservice:/app/storage \
            --env-file /etc/fileservice/.env \
            your-dockerhub-username/fileservice:${{ github.sha }}
